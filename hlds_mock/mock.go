package hlds_mock

import (
	"bytes"
	"fmt"
	"net"
)

var (
	RconPasswordMock []byte
	ChallengeMock = []byte{ 0x31, 0x30, 0x39, 0x34, 0x36, 0x36, 0x31, 0x36, 0x38, 0x31 }
	CommandQuit = []byte{ 0x71, 0x75, 0x69, 0x74, 0x0a }
	QuitMessage = []byte{ 0xFF, 0xFF, 0xFF, 0xFF, 0x6C, 0x00, 0x00 }
	ChallengeResponse = []byte { 0xFF, 0xFF, 0xFF, 0xFF, 0x63, 0x68, 0x61, 0x6C, 0x6C, 0x65, 0x6E, 0x67, 0x65, 0x20, 0x72, 0x63,
		0x6F, 0x6E, 0x20, 0x31, 0x30, 0x39, 0x34, 0x36, 0x36, 0x31, 0x36, 0x38, 0x31, 0x0a, 0x00 }
	NoChallengeMessage = []byte{ 0xFF, 0xFF, 0xFF, 0xFF, 0x39, 0x4E, 0x6F, 0x20, 0x63, 0x68, 0x61, 0x6C, 0x6C, 0x65, 0x6E, 0x67, 0x65,
		0x20, 0x66, 0x6F, 0x72, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2E, 0x0A, 0x00 }
	ChallengeRequest = []byte{ 0xff, 0xff, 0xff, 0xff, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x20, 0x72, 0x63,
		0x6f, 0x6e, 0x0a, 0x00  }
	CommandExecutionRequest = []byte{ 0xff, 0xff, 0xff, 0xff, 0x72, 0x63, 0x6f, 0x6e, 0x20, 0x31, 0x30, 0x39, 0x34, 0x36, 0x36, 0x31,
		0x36, 0x38, 0x31 }
	ExecutionAck = []byte{ 0xFF, 0xFF, 0xFF, 0xFF, 0x6C, 0x00, 0x00 }
	InvalidPasswordResponse = []byte{0xFF, 0xFF, 0xFF, 0xFF, 0x6C, 0x42, 0x61, 0x64, 0x20, 0x72, 0x63, 0x6F,
        0x6E, 0x5F, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x2E, 0x0A, 0x00, 0x00}
	AckResponse = []byte{0xFF, 0xFF, 0xFF, 0xFF, 0x6C, 0x00, 0x00}
)

func connect () (net.Conn, error) {
	server, _ := net.Pipe()
	return server, nil
}

func Run(password string, pc net.Conn) {
	// listen to incoming udp packets
	defer pc.Close()
	RconPasswordMock = []byte(password)
	fmt.Println("HLDS mock handler started")
	for {
		buf := make([]byte, 2048)
		n, err := pc.Read(buf)
		if err != nil {
			continue
		}
		buf = buf[:n]
		fmt.Println(fmt.Sprintf("Client sent this payload to HLDS: %v", buf))
		if bytes.HasPrefix(buf, CommandQuit) {
			fmt.Println("HLDS mock handler shutting down...")
			break
		} else {
			go serve(pc, buf[:n])
		}
	}
}

func serve(pc net.Conn, buf []byte) {
	if bytes.HasPrefix(buf, ChallengeRequest) {
		fmt.Println(fmt.Sprintf("Client asked for new challenge. Replying: %v", ChallengeResponse))
		pc.Write(ChallengeResponse)
	} else {
		cmdMsg := make([]byte, 0, len(CommandExecutionRequest) + len(RconPasswordMock))
		cmdMsg = append(cmdMsg, CommandExecutionRequest...)
		if !bytes.HasPrefix(buf, cmdMsg) {
			fmt.Println(fmt.Sprintf("Client didn't send a challenge. Replying: %v", NoChallengeMessage))
			pc.Write(NoChallengeMessage)
			return
		}
		cmdMsg = append(cmdMsg, ' ')
		cmdMsg = append(cmdMsg, RconPasswordMock...)
		if !bytes.HasPrefix(buf, cmdMsg) {
			fmt.Println(fmt.Sprintf("Client sent a wrong password. Replying: %v", InvalidPasswordResponse))
			pc.Write(InvalidPasswordResponse)
			return
		}
		fmt.Println(fmt.Sprintf("Client sent a command. Replying: %v", AckResponse))
		pc.Write(AckResponse)
	}
}